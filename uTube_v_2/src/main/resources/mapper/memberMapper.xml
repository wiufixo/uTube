<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<resultMap type="com.topia.myapp.entity.Member" id="member">
		<result column="MEM_ID" property="memId"/>
		<result column="MEM_NAME" property="memName"/>
		<result column="PASSWORD" property="password"/>
		<result column="AUTH" property="auth"/>
		<result column="REGIST_DATE" property="registDate"/>
		<result column="UPDATE_DATE" property="updateDate"/>
		<result column="REGIST_ID" property="registId"/>
		<result column="UPDATE_ID" property="updateId"/>
		<result column="REGIST_IP" property="registIp"/>
		<result column="UPDATE_IP" property="updateIp"/>
		<result column="EMAIL" property="email"/>
		<result column="IMAGE" property="image"/>
		<result column="SAVE_IMAGE" property="saveImage"/>
		<result column="CHANNEL_NAME" property="channelName"/>
		<result column="FOLLOWERS" property="followers"/>
		<result column="FOLLOWINGS" property="followings"/>
		<result column="UPLOADS" property="uploads"/>
	</resultMap>
	
	<sql id="search">
		<if test="keyword != ''">
	    	<if test="searchType == 'all'">
		    AND (
		 		mem_name LIKE '%'||#{keyword}||'%'
		 		OR
		 		email LIKE '%'||#{keyword}||'%'
		 		OR
		 		auth LIKE '%'||#{keyword}||'%'
		 		)
	    	</if>
	    	<if test="searchType == 'idEmail'">
	    	AND (
		 		mem_name LIKE '%'||#{keyword}||'%'
		 		OR
		 		email LIKE '%'||#{keyword}||'%'
		 		)
	    	</if>
	    	<if test="searchType == 'id'">
	    	AND (
		 		mem_name LIKE '%'||#{keyword}||'%'
		 		)
	    	</if>
	    	<if test="searchType == 'email'">
	    	AND (
		 		email LIKE '%'||#{keyword}||'%'
		 		)
	    	</if>
	    	<if test="searchType == 'auth'">
	    	AND (
		 		auth LIKE '%'||#{keyword}||'%'
		 		OR
		 		auth LIKE UPPER('%'||#{keyword}||'%')
		 		OR
		 		auth LIKE LOWER('%'||#{keyword}||'%')
		 		)
	    	</if>
	    </if>
	</sql>
	
	<select id="membersList" resultMap="member" parameterType="HashMap">
		SELECT
			mem_id,
			mem_name,
			password,
			auth,
			regist_date,
			update_date,
			regist_id,
			update_id,
			regist_ip,
			update_ip,
			email,
			image,
			save_image,
			channel_name,
			followers,
			followings,
			uploads
		FROM
		    (
		    SELECT
					ROWNUM AS rn,
					A.*
				FROM
					(
					SELECT 
						mem_id,
						mem_name,
						password,
						auth,
						regist_date,
						update_date,
						regist_id,
						update_id,
						regist_ip,
						update_ip,
						email,
						image,
						save_image,
						channel_name,
						(
						SELECT
							COUNT(follow_id)
						FROM
							follow
						WHERE
							followed=mem_id
						) followers,
						(
						SELECT
							COUNT(follow_id)
						FROM
							follow
						WHERE
							follower=mem_id
						) followings,
						(
						SELECT
							COUNT(post_id)
						FROM
							post
						WHERE
							mem_id=m.mem_id
						) uploads
					FROM
					    member m
					WHERE
						1 = 1
						<include refid="search"></include>
					ORDER BY
					   ${criteria} desc
					) A
		    ) B
		WHERE
		    rn between #{start} and #{end}
	</select>
	
	<select id="membersCnt" resultType="Integer" parameterType="HashMap">
		SELECT
			count(mem_id)
		FROM
			member
		WHERE 
			1 = 1
		<include refid="search"></include>
	</select>
	
	<select id="findPassword" resultType="String" parameterType="HashMap">
		SELECT
			password
		FROM
			member
		WHERE 
			mem_name = #{memName}
		AND
			email = #{email}
	</select>
	
	<select id="login" resultMap="member" parameterType="HashMap">
		SELECT
			mem_id,
			mem_name,
			password,
			auth,
			regist_date,
			update_date,
			regist_id,
			update_id,
			regist_ip,
			update_ip,
			email,
			image,
			save_image,
			channel_name
		FROM
			member
		WHERE
			mem_name=#{memName}
		AND
			password=#{password}
	</select>
	
	<select id="findByMemId" resultMap="member" parameterType="Integer">
		SELECT
			mem_id,
			mem_name,
			password,
			auth,
			regist_date,
			update_date,
			regist_id,
			update_id,
			regist_ip,
			update_ip,
			email,
			image,
			save_image,
			channel_name,
			(
			SELECT
				COUNT(follow_id)
			FROM
				follow
			WHERE
				followed=mem_id
			) followers,
			(
			SELECT
				COUNT(follow_id)
			FROM
				follow
			WHERE
				follower=mem_id
			) followings,
			(
			SELECT
				COUNT(post_id)
			FROM
				post
			WHERE
				mem_id=m.mem_id
			) uploads
		FROM
			member m
		WHERE
			mem_id=#{memId}
	</select>
	
	<select id="findByMemName" resultMap="member" parameterType="String">
		SELECT
			mem_id,
			mem_name,
			password,
			auth,
			regist_date,
			update_date,
			regist_id,
			update_id,
			regist_ip,
			update_ip,
			email,
			image,
			save_image,
			channel_name
		FROM
			member
		WHERE
			mem_name=#{memName}
	</select>
	
	<insert id="join" parameterType="com.topia.myapp.entity.Member">
		<selectKey keyProperty="memId" resultType="Integer" order="BEFORE">
			select member_SEQ.nextval as memId from dual
		</selectKey>
		INSERT INTO member(
			mem_id,
			mem_name,
			password,
			auth,
			regist_date,
			regist_id,
			regist_ip,
			email,
			image,
			save_image,
			channel_name
			)
		VALUES(
			#{memId},
			#{memName},
			#{password},
			#{auth},
			sysdate,
			<if test="registId != 0">
				#{registId},
			</if>
			<if test="registId == null or registId == 0">
				#{memId},
			</if>
			#{registIp},
			#{email},
			#{image},
			#{saveImage},
			#{channelName}
		)
	</insert>
	
	<update id="update" parameterType="com.topia.myapp.entity.Member">
		UPDATE member set
			mem_name=#{memName},
			password=#{password},
			<if test="auth != null">
			auth=#{auth},
			</if>
			update_date=sysdate,
			update_id=#{updateId},
			update_ip=#{updateIp},
			<if test="image != null and saveImage != null">
				image=#{image},
				save_image=#{saveImage},
			</if>
			email=#{email},
			channel_name=#{channelName}
		WHERE
			mem_id=#{memId}
	</update>
	
	<delete id="delete" parameterType="Integer">
		DELETE member
		WHERE
			mem_id=#{memId}
	</delete>
	
	
</mapper>